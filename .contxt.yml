# we use the build version for not running in a version conflict, if we do not have the new version installed
version: "{{$.build.version.main}}.{{$.build.version.mid}}.{{$.build.version.minor}}"

# define ours workspace
workspace:
  project: contxt
  role: root
  version: "{{$.release.version.main}}.{{$.release.version.mid}}.{{$.release.version.minor}}"

# we need a couple of imports to create some
# content depending the values we imported
# see .inc.contxt.yml where all value files defined
config:
  imports:
    - ./imports/dependabot.tpl depandabot
    - ./imports/coverage.html coverage
    - ./imports/Makefile.tpl makefile
    - ./imports/vscode.workspace.yml vscode-ws
    - ./imports/go_build.tpl build-action
    - ./imports/go_test.tpl test-action
    - ./imports/go_test_loop.tpl test-action-loop
    - ./imports/codehead.tpl codehead
    - ./imports/Dockerfile.ubuntu docker
    - ./imports/build.sh build-sh
    - ./imports/winbuild.bat winbuild-bat
    - ./imports/README.md readme
    - ./imports/goreleaser/.goreleaser.yml.tpl goreleaser
  variables:
      include-dev-externals: ""
      configmodul: github.com/swaros/contxt/module/configure
      coverage-report: ""
      depbot-file: .github/dependabot.yml
      licence_keyword: "MIT License"
      build-info: "-release"
      docker-tag: "{{$.release.version.main}}.{{$.release.version.mid}}.{{$.release.version.minor}}"
      docker-registry: "swaros"
      docker-image: "contxt"
      docker-image-tag: "${docker-registry}/${docker-image}:${docker-tag}"

###### contxt welcome message
###### just to display default variables
task:
  - id: welcome
    script:
      - echo "welcome to contxt"
      - echo " --- required build version        [ - {{$.build.version.main}}.{{$.build.version.mid}}.{{$.build.version.minor}} - ]"
      - echo " --- targets build version         [ - {{$.release.version.main}}.{{$.release.version.mid}}.{{$.release.version.minor}} - ]"
      - echo " --- self version                  [ - ${CTX_VERSION} - ]"
      - echo " --- operating system              [ - ${CTX_OS} - ]"
#{{- if $.WS0_contxt_root}} # always check if is set. without project info, this is not exists
      - echo " --- WS0_contxt_root = go/template [ - {{$.WS0_contxt_root}} - ]"
#{{- end}}
      - echo " --- WS0_contxt_root = ctx/var     [ - ${WS0_contxt_root} - ]"
#{{- range $k, $modul := $.module }}

  ### create tasks for external modules
#  {{- if not $modul.local}}
      - echo " --- external modul  -->  {{ $modul.modul }} [ - {{ $modul.path }} - ]"
#  {{- end }}
#{{- end }}
    next:
      - go-check

## set the build version to the development version
  - id: dev
    variables:
      build-info: "-dev"
######
  - id: dev-external
    variables:
      include-dev-externals: "YES"

####### just for quick checking the go env on different machines
####### more then a note.
  - id: go-check
    require:
      system: linux
    script:
      - echo ${GOROOT}
      - go env | grep GOROOT
      - go env | grep GOVERSION
      - go version

  - id: go-check
    require:
      system: windows
    script:
      - echo ${GOROOT}
      - go env | Select-String GOROOT
      - go env | Select-String GOVERSION
      - go version

  - id: dos2unix
    require:
      system: linux
    script:
      - |
       if ! [ -x "$(command -v dos2unix)" ];
       then
         echo ""
         echo "<b:yellow><f:red> ERROR </>  <f:cyan>dos2unix</> is required"
         echo ""
       else
         find . -type f -print0 | xargs -0 dos2unix -v
         git status -s
       fi


  ##### module based task #####
  ##### the definition for modules is stored in .modules.yml
  ##### here we check if all modules we expect
  ##### exists. and if not we create this modul
  ##### by using the regular go tool-set

  ## clean tasks
  - id: clean
    require:
      system: linux
    runTargets:
      - clean-moduls
    script:
      - echo "clean all"
      - rm -rfv ./bin/*
      - rm -rfv ./docs/coverage.html
      - rm -rfv ./*.out.tmp

  - id: clean-moduls
    require:
      system: linux
    script:
      - echo "clean moduls"
#{{- range $k, $modul := $.module }}
#  {{- if $modul.clean}}
      - echo "   clean modul {{ $modul.modul }}"
      - |
        cd ./module/{{ $modul.modul }}/
        {{ range $k, $clean := $modul.clean }}
        echo "      remove {{ $clean }}"
        rm -rfv {{ $clean }}
        {{ end }}
#  {{- end }}
#{{- end }}

  ## update mai task

  - id: update-all
    needs:
      - set-version
    runTargets:
      - modules-verify
      - gorelease-config-update
      - makefile-update
      - licence-header-check
      - build-script-update
    script:
      - echo "update all"
  ## update readme
  - id: update-readme
    needs:
      - set-version
    script:
    - "#@var-to-file readme {{ $.docu.readme }}"

  ## update makefile
  - id: makefile-update
    needs:
      - set-version
    script:
    - "#@var-to-file makefile Makefile"

  ## update build script
  - id: build-script-update
    needs:
      - set-version
    script:
    - "#@var-to-file build-sh build.sh"
    - "#@var-to-file winbuild-bat winbuild.bat"

  - id: build-script-update
    require:
      system: linux
    script:
    - chmod +x ./build.sh

  ## update github actions
  - id: github-actions-update
    needs:
      - set-version
    script:
      - "#@var-to-file build-action .github/workflows/go.yml"
      - "#@var-to-file test-action .github/workflows/test.yml"
# {{- if $.testcases.looptests }}
      - "#@var-to-file test-action-loop .github/workflows/test-loop.yml"
# {{- else }}
      - rm -rf .github/workflows/test-loop.yml
# {{- end }}

  ## verify the modules
  - id: modules-verify
    runTargets:
      - depandabot
      - github-actions-update
    needs:
#{{- range $k, $modul := $.module }}
      - verify-modul-{{ $modul.modul }}
#{{- end }}
#{{- range $k, $modul := $.module }}

  ### create tasks for external modules
#  {{- if not $modul.local}}
  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
    require:
      variables:
        include-dev-externals: "=YES"
    script:
      - echo "EXTERNAL >>> verify external module {{ $modul.modul }} on {{ $modul.path }}"

  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
    require:
      variables:
        include-dev-externals: "!YES"
    script:
      - echo "IGNORE EXTERNAL >>> {{ $modul.modul }}"
      - echo "to force external modules set var include-dev-externals to yes (ctx run modules-verify -v include-dev-externals=YES) "

  ### add external module
  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
      ignoreCmdError: true
    require:
      system: linux
      variables:
        include-dev-externals: "=YES"
      exists:
        - {{ $modul.path }}
    script:
      - grep {{ $modul.path }} go.work
    listener:
      - trigger:
          onerror: true
        action:
          script:
            - echo "EXTERNAL >>> update go.work for external module {{ $modul.modul }}"
            - echo "EXTERNAL >>> using path {{ $modul.path }}"
            - echo "             [go work use {{ $modul.path }}]"
            - go work use {{ $modul.path }}

#  {{- end }}


  ### create tasks for local modul dependencies
#  {{- if $modul.local}}
  ## create dir if not exists
  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
    require:
      notExists:
        - ./module/{{ $modul.modul }}
    script:
      - mkdir ./module/{{ $modul.modul }}

  ## create mod if not exists
  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
    require:
      notExists:
        - ./module/{{ $modul.modul }}/go.mod
    script:
      - |
        cd ./module/{{ $modul.modul }}
        go mod init github.com/swaros/contxt/module/{{ $modul.modul }}

  - id: verify-modul-{{ $modul.modul }}
    options:
      invisible: true
      ignoreCmdError: true
    require:
      system: linux
    script:
      - grep {{ $modul.modul }} go.work
    listener:
      - trigger:
          onerror: true
        action:
          script:
            - echo "update go.work for local module {{ $modul.modul }}"
            - go work use module/{{ $modul.modul }}
#  {{- end}}
#{{- end }}

#### generate visual studio code workspace file
  - id: code-workspace
    script:
       - "#@export-to-json vscode-ws VS_WS_CONFIG"
       - "#@var-to-file VS_WS_CONFIG contxt.code-workspace"

#### update depandabot
  - id: depandabot
    script:
       - "#@var-to-file depandabot ${depbot-file}"

#### update dependencies for all modules
  - id: update-dependencies
    script:
#    {{- range $k, $test := $.module }}
#    {{- if $test.local}}
      - |
       cd ${CTX_PWD}/module/{{ $test.modul }}
       go mod tidy
       cd ${CTX_PWD}
#    {{- end }}
#    {{- end }}
      - git status

#### the next is all about tests

##### this is the regular test for all modules
  - id: vet
    script:
#    {{- range $k, $test := $.module }}
#    {{- if $test.local}}
      - echo "verify code in modul {{ $test.modul }}"
      - go vet ./module/{{ $test.modul }}/./...
#    {{- end }}
#    {{- end }}


##### this is the regular test for all modules
  - id: test
    script:
#    {{- range $k, $test := $.module }}
#    {{- if $test.local}}
      - echo "testing modul {{ $test.modul }}"
      - go test  -failfast ./module/{{ $test.modul }}/./...
#    {{- end }}
#    {{- end }}

##### like the regular test but now we update the coverage report
##### maybe i overlooked an option to summerize them, but
##### because it seems there is none, we just create oure own overview page
##### and link to the detailed html report.
##### also we add the -func output to the report

  - id: test-coverage
    require:
      notExists:
        - docs/test/coverage/
    script:
      - mkdir ./docs/test/coverage/

  - id: test-coverage
    script:
      - "#@set coverage-report <b></b>"
#      {{- range $k, $test := $.module }}
#      {{- if $test.local}}
      - go test -cover ./module/{{ $test.modul }}/./... -coverprofile ./docs/test/coverage/test.{{ $test.modul }}.out
      - go tool cover -html ./docs/test/coverage/test.{{ $test.modul }}.out -o ./docs/test/coverage/{{ $test.modul }}.html
      - "#@add coverage-report <h2>{{ $test.modul }}</h2>"
      - "#@add coverage-report <div class=\"report\">"
      - "#@var report-cover go tool cover -func ./docs/test/coverage/test.{{ $test.modul }}.out"
      - "#@add coverage-report ${report-cover}"
      - "#@add coverage-report </div>"
      - "#@add coverage-report <a target=\"coverage_details\" href=\"test/coverage/{{ $test.modul }}.html\">report for {{ $test.modul }}</a>"
#    {{- end }}
#    {{- end }}
      - "#@var-to-file coverage ./docs/coverage.html"

  - id: test-coverage
    require:
      exists:
        - docs/coverage.html
    script:
      - echo "try to open default browser with report ${CTX_PWD}"
      - echo "if this is not working, you can find the report here"
      - echo "file://${CTX_PWD}/docs/coverage.html"

  - id: test-coverage
    require:
      system: linux
      exists:
        - docs/coverage.html
    script:
      - xdg-open file://${CTX_PWD}/docs/coverage.html

  - id: test-coverage
    require:
      system: windows
      exists:
        - docs/coverage.html
    script:
      - Start-Process file://${CTX_PWD}/docs/coverage.html

#### same as test but running async
#### it is just faster
  - id: test-each
    needs:
#    {{- range $k, $test := $.module }}
#    {{- if $test.local}}
      - atest-{{ $test.modul }}
#    {{- end }}
#    {{- end }}

#    {{- range $k, $test := $.module }}
#    {{- if $test.local}}
  - id: atest-{{ $test.modul }}
    options:
      displaycmd: false
      panelsize: 25
    script:
      - echo "start async testing modul {{ $test.modul }}"
      - go test -count=1 -failfast -timeout {{ $test.test.timeout }} ./module/{{ $test.modul }}/./...
#    {{- end }}
#    {{- end }}

### BUILD SECTION ####
### this is the build section to build any binarys

# iterate over all targets
# {{- range $targetName, $targets := $.build.targets }}

# if this is flagged as release, include them to the regular build
# {{- if $targets.is_release}}
  - id: build
# {{- else}}
  - id: build-{{ $targetName }}
# {{- end}}
    options:
      displaycmd: false
      invisible: false
    require:
      system: linux
    needs:
      - test
      - modules-verify
      - set-version
    script:
      - echo "build binary    <f:blue>{{ $targets.output }}</>"
      - echo "  main file     <f:blue>{{ $targets.mainfile }}</>"
      - echo "  target        <f:blue>./bin/{{ $targets.output }}${bin_add}</>"
      - echo "  ldflags       <f:blue>{{ $targets.ldflags }}</>"
      # creating the ldflags for the build
      # first we use the default ldflags from the build section build.preset.ldflags
      # {{- range $k, $ldflag := $.build.preset.ldflags }}
      # {{- if eq $k 0 }}
      - "#@set LDFLAGS -X {{ $ldflag }} " # set ld flaggs for first entry
      # {{- else}}
      - "#@add LDFLAGS -X {{ $ldflag }} " # add ld flaggs for all other entrys
      # {{- end}}
      # {{- end }}

      # now we add the ldflags from the target
      # {{- range $k, $ldflag := $targets.ldflags }}
      - "#@add LDFLAGS -X {{ $ldflag }} " # add ld flaggs for all other entrys
      # {{- end }}

      # here we create the build command
      - "#@set BUILD-COMMAND go build -ldflags \"${LDFLAGS}\" -o ./bin/{{ $targets.output }}${bin_add} {{ $targets.mainfile }}"
      - echo "  BUILD-COMMAND <f:yellow>${BUILD-COMMAND}</>"
      # execute the build command
      - ${BUILD-COMMAND}
      - echo "  build done"
      - echo "  check version [<f:blue>./bin/{{ $targets.output }}${bin_add} {{ $targets.version_verify}}</>]"
      # just execute the binary to check the version. if this is not working, the build is not working
      - ./bin/{{ $targets.output }}${bin_add} {{ $targets.version_verify}}
# {{- end }}
##### END OF BUILD SECTION #####

##### Versions update #####
  # copy the version from the release secion in build.yml into local variables
  - id: set-version
    options:
      invisible: true
    script:
      - "#@set main-version {{$.release.version.main}}"
      - "#@set mid-version {{$.release.version.mid}}"
      - "#@set minor-version {{$.release.version.minor}}"

  - id: set-version
    options:
      displaycmd: false
      invisible: true
    variables:
      bin_add: ""
    require:
      system: linux
    script:
      - "#@var build-hash date -u +.%Y%m%d.%H%M%S-linux${build-info}"

  - id: set-version
    options:
      displaycmd: false
      invisible: true
      maincmd: pwsh
      mainparams:
        - "-Command"
    require:
      system: windows
    script:
      - "#@var build-hash Get-Date -UFormat \"%m.%d.%Y.%R-windows${build-info}\""
      - "#@set bin_add .exe"

  - id: set-version
    options:
      displaycmd: false
      invisible: true
    script:
     - echo "version ${main-version}.${mid-version}.${minor-version} ${build-hash} bin-add [${bin_add}]"

# for building the docker image we need to create a dockerfile
  - id: build-docker
    needs:
      - build
    script:
      - "#@var-to-file docker Dockerfile.tmp"
      - docker build -t ${docker-image-tag}${build-info} -f Dockerfile.tmp .
      - echo "docker run -it -v ${CTX_PWD}:/etc/contxt  ${docker-image-tag}${build-info} run say-hello"
      - docker run -i -v ${CTX_PWD}:/etc/contxt  ${docker-image-tag}${build-info} run say-hello

## a simple hello world
## just to test the docker image is working
  - id: say-hello
    script:
      - echo "hello world"

### licence check
  - id: licence-header-check
    options:
      displaycmd: false
      invisible: false
    require:
      system: linux
    next:
      - test-each
    script:
      - |
       GOFILES=$(find . -type f -name "*.go" ! -name "*_test.go" ! -path "./vendor/*" ! -path "./bin/*")
       while IFS= read -r gfile; do
          #echo "... $gfile ..."
          # check if file has licence header
          if ! grep -q "${licence_keyword}" "$gfile"; then
            echo "MISSING: $gfile is missing licence header"
            FCNT=$(cat $gfile)
            echo "${codehead}$FCNT" > $gfile
          else
            echo "OK: $gfile"
          fi
       done <<< "$GOFILES"

### goreleaser tasks
  - id: gorelease-config-update
    needs:
      - set-version
    script:
      - "#@var-to-file goreleaser .goreleaser.yml"

  - id: gorelease-check
    needs:
      - gorelease-config-update
    script:
      - goreleaser check
  
  - id: gorelease-snapshot
    needs:
      - gorelease-check
    script:
      - goreleaser release --snapshot --clean

# special tests defined in build.yml
# they need some special handling

  - id: test-loops
    options:
      displaycmd: false
      invisible: false
    needs:
      - test-each
#{{- range $testName, $test := $.testcases.looptests }}
      - testing-{{ $testName }}
#{{- end }}
    require:
      system: linux
    script:
      - echo "test loops done"

#{{ range $k, $testcase := $.testcases.looptests }}
  - id: testing-{{ $k }}
    options:
      displaycmd: false
      invisible: true
    require:
      system: linux
    listener:
      - trigger:
          onoutContains:
           - "FAIL"
        action:
          script:
            - echo "<f:red>Test Failed</> {{ $k }}"
            - echo "  folder  <f:yellow>{{ $testcase.folder }}</>"
            - exit 10  # force error
    script:
      - echo "run test {{ $k }}"
      - echo "  loops   <f:blue>{{ $testcase.loops }}</>"
      - echo "  timeout <f:blue>{{ $testcase.timeout }}</>"
      - echo "  folder  <f:blue>{{ $testcase.folder }}</>"
      - echo "  test    <f:blue>{{ $testcase.test }}</>"
      - echo "  command <f:blue>go test -count=1 -failfast -timeout {{ $testcase.timeout }} -run {{ $testcase.test }} {{ $testcase.folder }}</>"
      - |
        for i in $(seq 1 {{ $testcase.loops }});
        do
          echo "loop <f:yellow>$i</> of <f:yellow>{{ $testcase.loops }}</> for test <f:blue>{{ $k }}</>"
          OUTPUT=$(go test -count=1 -failfast -timeout {{ $testcase.timeout }} -run {{ $testcase.test }} {{ $testcase.folder }})
          echo "$OUTPUT" > testing-{{ $k }}-$i-runlog.out.tmp
          # this will be executed for tests they are not failing
          if grep "ok" testing-{{ $k }}-$i-runlog.out.tmp; then
            rm -rfv testing-{{ $k }}-$i-runlog.out.tmp
          fi
          # print the output at last
          echo "  <f:cyan>${OUTPUT}</>"
        done
#{{ end }}
